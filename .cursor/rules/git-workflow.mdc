---
description: 
globs: 
alwaysApply: false
---
**Author:** Bryan Collins

## Git Workflow Guidelines

### Understanding the Sync Problem
This project uses GitHub Actions to automatically update content daily. This creates a unique challenge: 
- Local changes can become out of sync with the remote repository
- Push attempts are rejected with "Updates were rejected because the remote contains work"
- Content files (HTML) are generated both locally and by the workflow

**Important Note on API Keys:** The GitHub Actions workflow uses API keys stored as GitHub Secrets (e.g., `secrets.NEWS_API_KEY`). For local development, you need to set these as environment variables (see `README.md`). **Never commit API keys to the repository.**

### Recommended Workflow

#### Before Making Changes
1. **Pull latest changes:**
   ```bash
   git pull --rebase
   ```

2. **Check workflow status:**
   - Visit GitHub repository Actions tab to verify workflow status
   - Note when the last automatic update occurred

#### Making Code Changes
1. Only modify template and code files, NOT generated content:
   - ✅ `aggregator.py`
   - ✅ `template.html` (Note: Changes here also affect `index.html` and archives)
   - ✅ `.github/workflows/daily-update.yml`
   - ✅ `generate_sitemap.py`
   - ✅ `requirements.txt`
   - ❌ `index.html` (auto-generated by `aggregator.py` using `template.html`)
   - ❌ `archive/*.html` (auto-generated by `aggregator.py` using `template.html`)
   - ❌ `sitemap.xml` (auto-generated by `generate_sitemap.py`)

2. For local testing (generates `index.html`, `archive/*.html`):
   ```bash
   python3 aggregator.py
   ```

#### Committing Changes
1. **Stage only intended code/template files:**
   ```bash
   git add aggregator.py template.html [other code files]
   ```

2. **Commit with descriptive message:**
   ```bash
   git commit -m "Descriptive message about code changes"
   ```

3. **Clean working directory (CRITICAL):**
   - Before pulling, check `git status`.
   - **Generated files (`index.html`, `sitemap.xml`, `archive/*`) WILL appear as modified locally if you ran `python3 aggregator.py`. These changes MUST be discarded before pulling/pushing to avoid conflicts with the GitHub Action's output.**
     ```bash
     git restore index.html sitemap.xml archive/
     # If you only changed aggregator.py and NOT template.html, and ran the script,
     # you may still need to restore index.html and archive/ files if their content
     # (e.g., dates, fetched articles) changed, even if the template structure did not.
     ```
   - If you *only* intended to change `aggregator.py` but `template.html` was *not* modified by you, and you ran `python3 aggregator.py`, `index.html` and `archive/` files will still be modified by the script run. Restore them.
   - If you modified `template.html`, ensure `index.html` and `archive/` are also restored before committing `template.html`. The GitHub Action will regenerate them using your `template.html` changes.

4. **Pull again with rebase before pushing:**
   ```bash
   git pull --rebase
   ```

5. **Push changes:**
   ```bash
   git push
   ```

#### After Pushing Code Changes
1. **Monitor the GitHub Action** (optional but recommended for significant changes):
   - Visit GitHub repository Actions tab.
   - The "Daily News Update" workflow should trigger automatically on push to main (if configured, or run on schedule). If not, or for immediate testing:
     - Select "Daily News Update" workflow.
     - Click "Run workflow" button.
     - Select branch (`main`) and click "Run workflow".

2. **Verify changes take effect** after workflow completes:
   - Check the live site.
   - Verify the generated content includes your changes.

### Troubleshooting Sync Issues

If your push is rejected:
1. **Pull with rebase:**
   ```bash
   git pull --rebase
   ```

2. **Resolve any conflicts** (usually in generated files if they were not restored):
   - **If rebase fails due to tracked file conflicts (often `index.html` or `archive` files if not restored):**
     It's generally safest to accept the remote version for these generated files, as your committed code (`aggregator.py`, `template.html`) will be used by the Action to regenerate them.
     ```bash
     # If conflicts exist in content files, prefer the remote version for these generated files:
     git checkout --theirs index.html
     git checkout --theirs sitemap.xml
     git checkout --theirs archive/[date].html # Adjust for specific conflicted archive file
     git add . # Stage the resolved files
     git rebase --continue
     ```
   - **If rebase fails due to untracked file conflicts:**
     - You might see `error: The following untracked working tree files would be overwritten by checkout...`
     - Remove or rename the conflicting local untracked file(s):
       ```bash
       rm path/to/conflicting/untracked/file
       ```
     - Run `git pull --rebase` again.

3. **Try pushing again:**
   ```bash
   git push
   ```

If issues persist:
1. Stash your *code* changes (`git stash push -- aggregator.py template.html ...other_code_files`).
2. Ensure your working directory is clean of generated file changes (`git status`, `git restore ...`).
3. Pull from remote (`git pull --rebase`).
4. Apply stash (`git stash pop`) and resolve any conflicts in your *code* files.
5. Commit and push your code changes.
