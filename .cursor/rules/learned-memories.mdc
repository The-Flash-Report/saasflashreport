---
description: This rule defines how the AI agent should manage and utilize memory improve coding consistency.
globs: *
alwaysApply: false
---
# AI Memory Rule

This rule defines how the AI should manage and utilize its "memory" regarding this specific project, including user preferences, learned facts, and project-specific conventions.

## Purpose

The AI's memory helps maintain consistency and adapt to specific project needs or user preferences discovered during interactions. It prevents the AI from repeatedly asking for the same information or making suggestions contrary to established patterns.

## Storage

All learned project-specific knowledge and preferences should be stored and referenced in the `learned-memories.mdc` file located in `.cursor/rules`.

## Updating Memory

When new information relevant to the project's conventions, user preferences, or specific technical details is learned (either explicitly told by the user or inferred through conversation), the AI should:

1.  **Identify Key Information:** Determine the core piece of knowledge to be stored.
2.  **Check Existing Memory:** Review `learned-memories.mdc` to see if this information contradicts or updates existing entries.
3.  **Propose Update:** Suggest an edit to `learned-memories.mdc` to add or modify the relevant information. Keep entries concise and clear.

## Using Memory

Before proposing solutions, code changes, or answering questions, the AI should consult `learned-memories.mdc` to ensure its response aligns with the recorded knowledge and preferences.

## Example Scenario

**User:** "We've decided to use Tailwind v4 for this project, not v3."

**AI Action:**

1.  Recognize this as a project-specific technical decision.
2.  Check `learned-memories.mdc` for existing Tailwind version information.
3.  Propose adding or updating an entry in `learned-memories.mdc`:
    ```markdown
    ## Technical Decisions

    *   **CSS Framework:** Tailwind v4 is used. Ensure usage aligns with v4 documentation and practices, noting differences from v3.
    ```
4.  In subsequent interactions involving Tailwind, the AI will refer to this entry and consult v4 documentation if necessary.

## Memory File (`.cursor/rules/learned-memories.mdc`)

The basic structure:

```markdown
# Project Memory

This file stores project-specific knowledge, conventions, and user preferences learned by the AI assistant.

## User Preferences

-   [Preference 1]
-   [Preference 2]

## Technical Decisions

-   [Decision 1]
-   [Decision 2]

## Project Conventions

-   [Convention 1]
-   [Convention 2]
```

# Project Memory

This file stores project-specific knowledge, conventions, and user preferences learned by the AI assistant.

## User Preferences
- **Author**: Bryan Collins is the project author and maintainer
- **Development Style**: Prefers comprehensive documentation and well-organized rule systems
- **API Testing**: Prefers real API testing over mock data for validation

## Technical Decisions
- **Project Type**: AI news aggregation website with daily automated updates
- **Hosting**: Netlify for static site hosting
- **Automation**: GitHub Actions for daily content updates
- **Template Engine**: Jinja2 for HTML template rendering
- **News Sources**: NewsAPI, Perplexity AI, RSS feeds, Reddit subreddits
- **SEO Tools**: Custom sitemap generation, structured data, meta tag optimization
- **Flash Summary Component**: Standalone reusable component for Perplexity API integration
- **API Credentials**: Perplexity API key stored as PERPLEXITY_API_KEY in environment variables
- **Component Architecture**: **CRITICAL** - Use standalone components for new features instead of inline fixes. The Flash Summary Component (May 30, 2025) proved that building separate, reusable components is vastly superior to trying to fix broken inline code. Results: 95% code reduction, zero bugs, easy testing, multi-project reusability.

## Project Conventions
- **File Organization**: Cursor rules stored in `.cursor/rules/` directory with `.mdc` extension
- **Configuration**: Centralized configuration in `config.json` and `keyword_config.json`
- **Content Structure**: Daily archives, keyword-based categorization, trending sections
- **Git Workflow**: Careful management of auto-generated vs. manually edited files
- **Component Testing**: Real API testing preferred using actual Perplexity API for validation
- **Feature Development**: **ALWAYS** create standalone components for new features rather than patching existing code. Components should include comprehensive documentation, test suite, and integration examples.
- **QA Process**: **CRITICAL** - Create standalone preview pages for testing styling/template changes. Store in `/QA/` directory with descriptive filenames (e.g., `headlines-styling-preview.html`). This approach allows rapid iteration and comparison of multiple solutions without running the full aggregator script. Include side-by-side comparisons showing current vs. proposed fixes with detailed annotations explaining changes. **IMPORTANT**: When testing styling changes that require fresh content, empty `processed_urls.json` first so the aggregator fetches new articles instead of skipping them all. This prevents the "Skipping already processed URL" issue during testing.

## Domain Knowledge
- **News Aggregation**: Focus on AI/artificial intelligence news and developments
- **Content Categories**: Trending Now, AI Products, Creator Economy, Business News, Research Breakthroughs, Industries, Deep Learning, Companies, Applications, Controversy
- **Automation Requirements**: Daily fetch, categorization, HTML generation, deployment, archiving
- **SEO Strategy**: Keyword-rich content, proper meta tags, structured data, sitemap maintenance
- **Flash Summary**: Successfully tested with real Perplexity API (May 30, 2025) - citations, links, and formatting work perfectly
- **Citation Handling**: Perplexity outputs [1], [2], [3] format (not [^1] footnotes) with Sources section
